{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code Works\\\\dynamicform\\\\src\\\\components\\\\InputDisplay.js\";\nimport React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { MenuItem } from '@mui/material';\nimport { useState } from 'react';\nimport { Button } from '@mui/material';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction InputDisplay(_ref) {\n  let {\n    data,\n    ChangeValue,\n    isSubmitting\n  } = _ref;\n\n  // Fixes the FieldNames\n  const FixNames = string => {\n    let word = string.replace(/([A-Z])/g, ' $1').trim();\n    word = word.toLowerCase().replace(/\\b[a-z]/g, function (letter) {\n      return letter.toUpperCase();\n    });\n    return word;\n  }; //const [dataValue, setDataValue] = useState(data.value)\n\n\n  const DisplayStuff = () => {//console.log(dataValue)\n  };\n\n  const SetValue = value => {\n    ChangeValue(data.fieldName, value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 3,\n        width: 1,\n        border: 0\n      },\n      children: [data.type != 'multiline' && data.type != 'select' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"text-input\",\n          label: FixNames(data.fieldName),\n          defaultValue: data.value,\n          sx: {\n            width: 1\n          },\n          onChange: e => SetValue(e.target.value),\n          type: data.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this) : null, data.type == 'select' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"select-input\",\n          select: true,\n          label: FixNames(data.fieldName),\n          value: data.value,\n          fullWidth: true,\n          onChange: e => SetValue(e.target.value),\n          children: data.options.map(option => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: option,\n            children: option\n          }, option, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this) : null, data.type == 'multiline' ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"multiline-input\",\n          label: FixNames(data.fieldName),\n          multiline: true,\n          rows: 4,\n          defaultValue: data.value,\n          fullWidth: true,\n          onChange: e => SetValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 21\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n\n_c = InputDisplay;\nexport default InputDisplay;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputDisplay\");","map":{"version":3,"sources":["C:/Code Works/dynamicform/src/components/InputDisplay.js"],"names":["React","Box","TextField","MenuItem","useState","Button","InputDisplay","data","ChangeValue","isSubmitting","FixNames","string","word","replace","trim","toLowerCase","letter","toUpperCase","DisplayStuff","SetValue","value","fieldName","mb","width","border","type","e","target","options","map","option"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport Box from '@mui/material/Box'\r\nimport TextField from '@mui/material/TextField'\r\nimport { MenuItem } from '@mui/material'\r\n\r\nimport {useState} from 'react'\r\nimport { Button } from '@mui/material'\r\n\r\nfunction InputDisplay({data, ChangeValue, isSubmitting}) {\r\n    \r\n    // Fixes the FieldNames\r\n    const FixNames = (string) => {\r\n        let word = string.replace(/([A-Z])/g, ' $1').trim();\r\n        word = word.toLowerCase().replace(/\\b[a-z]/g, function(letter) {\r\n            return letter.toUpperCase();\r\n        });\r\n        return word\r\n    }\r\n\r\n    //const [dataValue, setDataValue] = useState(data.value)\r\n\r\n\r\n    const DisplayStuff = () => {\r\n        //console.log(dataValue)\r\n    }\r\n\r\n    const SetValue = (value) => {\r\n        ChangeValue(data.fieldName, value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Box sx={{mb:3, width:1, border:0}}>\r\n\r\n\r\n                {/* TEXT FIELD */}\r\n                {data.type != 'multiline' && data.type != 'select' ?\r\n                    <div>\r\n                        <TextField\r\n                            id=\"text-input\"\r\n                            label={FixNames(data.fieldName)}\r\n                            defaultValue={data.value}\r\n                            sx ={{width:1}}\r\n                            onChange={e => SetValue(e.target.value)}\r\n                            type={data.type}\r\n                        />\r\n                    </div>\r\n                : null}\r\n\r\n                {/* SELECT FIELD */}\r\n                {data.type == 'select' ?\r\n                    <div>\r\n                        <TextField\r\n                            id=\"select-input\"\r\n                            select\r\n                            label={FixNames(data.fieldName)}\r\n                            value={data.value}\r\n                            fullWidth\r\n                            onChange={e => SetValue(e.target.value)}\r\n                        >\r\n                            {data.options.map(option => (\r\n                                <MenuItem key={option} value={option}>\r\n                                    {option}\r\n                                </MenuItem>\r\n                            ))}\r\n                        </TextField>\r\n                    </div>\r\n                : null}\r\n\r\n                {/* MULTILINE FIELD */}\r\n                {data.type == 'multiline' ?\r\n                    <div>\r\n                        <TextField\r\n                            id=\"multiline-input\"\r\n                            label={FixNames(data.fieldName)}\r\n                            multiline\r\n                            rows={4}\r\n                            defaultValue={data.value}\r\n                            fullWidth\r\n                            onChange={e => SetValue(e.target.value)}\r\n                        />\r\n                    </div>\r\n                : null}\r\n                \r\n               \r\n                {/* <Button onClick={DisplayStuff}>Display</Button> */}\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default InputDisplay"]},"metadata":{},"sourceType":"module"}